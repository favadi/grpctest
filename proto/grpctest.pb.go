// Code generated by protoc-gen-go. DO NOT EDIT.
// source: grpctest.proto

/*
Package grpctest is a generated protocol buffer package.

It is generated from these files:
	grpctest.proto

It has these top-level messages:
	Request
	Response
*/
package grpctest

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Request struct {
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *Request) Reset()                    { *m = Request{} }
func (m *Request) String() string            { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()               {}
func (*Request) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Request) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type Response struct {
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Response) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func init() {
	proto.RegisterType((*Request)(nil), "grpctest.Request")
	proto.RegisterType((*Response)(nil), "grpctest.Response")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for GrpcTest service

type GrpcTestClient interface {
	BiDirectionalStream(ctx context.Context, opts ...grpc.CallOption) (GrpcTest_BiDirectionalStreamClient, error)
}

type grpcTestClient struct {
	cc *grpc.ClientConn
}

func NewGrpcTestClient(cc *grpc.ClientConn) GrpcTestClient {
	return &grpcTestClient{cc}
}

func (c *grpcTestClient) BiDirectionalStream(ctx context.Context, opts ...grpc.CallOption) (GrpcTest_BiDirectionalStreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_GrpcTest_serviceDesc.Streams[0], c.cc, "/grpctest.GrpcTest/BiDirectionalStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &grpcTestBiDirectionalStreamClient{stream}
	return x, nil
}

type GrpcTest_BiDirectionalStreamClient interface {
	Send(*Request) error
	Recv() (*Response, error)
	grpc.ClientStream
}

type grpcTestBiDirectionalStreamClient struct {
	grpc.ClientStream
}

func (x *grpcTestBiDirectionalStreamClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *grpcTestBiDirectionalStreamClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for GrpcTest service

type GrpcTestServer interface {
	BiDirectionalStream(GrpcTest_BiDirectionalStreamServer) error
}

func RegisterGrpcTestServer(s *grpc.Server, srv GrpcTestServer) {
	s.RegisterService(&_GrpcTest_serviceDesc, srv)
}

func _GrpcTest_BiDirectionalStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GrpcTestServer).BiDirectionalStream(&grpcTestBiDirectionalStreamServer{stream})
}

type GrpcTest_BiDirectionalStreamServer interface {
	Send(*Response) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type grpcTestBiDirectionalStreamServer struct {
	grpc.ServerStream
}

func (x *grpcTestBiDirectionalStreamServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *grpcTestBiDirectionalStreamServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _GrpcTest_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpctest.GrpcTest",
	HandlerType: (*GrpcTestServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "BiDirectionalStream",
			Handler:       _GrpcTest_BiDirectionalStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "grpctest.proto",
}

func init() { proto.RegisterFile("grpctest.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 175 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4b, 0x2f, 0x2a, 0x48,
	0x2e, 0x49, 0x2d, 0x2e, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x80, 0xf1, 0x95, 0xe4,
	0xb9, 0xd8, 0x83, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0x84, 0x44, 0xb8, 0x58, 0xcb, 0x12, 0x73,
	0x4a, 0x53, 0x25, 0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0x20, 0x1c, 0x25, 0x05, 0x2e, 0x8e, 0xa0,
	0xd4, 0xe2, 0x82, 0xfc, 0xbc, 0xe2, 0x54, 0xec, 0x2a, 0x8c, 0x7c, 0xb8, 0x38, 0xdc, 0x8b, 0x0a,
	0x92, 0x43, 0x40, 0x66, 0x38, 0x70, 0x09, 0x3b, 0x65, 0xba, 0x64, 0x16, 0xa5, 0x26, 0x97, 0x64,
	0xe6, 0xe7, 0x25, 0xe6, 0x04, 0x97, 0x14, 0xa5, 0x26, 0xe6, 0x0a, 0x09, 0xea, 0xc1, 0x1d, 0x00,
	0xb5, 0x4d, 0x4a, 0x08, 0x59, 0x08, 0x62, 0xbe, 0x06, 0xa3, 0x01, 0xa3, 0x93, 0x5e, 0x94, 0x4e,
	0x7a, 0x66, 0x49, 0x46, 0x69, 0x92, 0x5e, 0x72, 0x7e, 0xae, 0x7e, 0x52, 0x72, 0x4e, 0x6a, 0x51,
	0x6e, 0x7e, 0x5e, 0x89, 0x3e, 0x4c, 0xb5, 0x3e, 0xd8, 0x07, 0xd6, 0x30, 0x6e, 0x12, 0x1b, 0x98,
	0x6f, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0x51, 0xea, 0xec, 0x11, 0xe3, 0x00, 0x00, 0x00,
}
